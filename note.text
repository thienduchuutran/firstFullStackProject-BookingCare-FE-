before the app runs into render function, it will stop by ocnstructor

class Login extends Component {
    constructor(props) {
        super(props);
    }

if Login is passed a prop from somewhere else, we can use it here

props can be number, var, object, etc
but state always is an object


if 
class Login extends Component {
    constructor(props) {
        super(props);
        this.state = {          
            username: 'hoidanit',
            password: 'duc', 
        }
    }

anything in the this.state is the first value in the input (placeholder)
!!! but here the value in the input will be fixed, we can't change -> not practical

->> To be practical where we can change the input and the state can keep track with real-time change, we use
    attribute onChange in the input
ex:
                            <input 
                                type='text' 
                                className='form-control' 
                                placeholder='Enter your username'
                                value={this.state.username}
                                onChange={(event) => this.handleOnChangeInput(event)}
                            ></input>

where the function attribute onChange will call a handling function named handleOnChangeInput
we code handleOnChangeInput function right above the render

=====> with all that, the app got the change, but we still need to re-render it on UI every time there's a change (update state variable)
=> add this.setState({}) inside the handling function

handleOnChangeInput = (event) => {
    this.setState({
        username: event.target.value
    })
    console.log(event.target.value)
}



Now we wanna get the values on the inputs (username and password) after we click login button
the action of clicking on the login button called onClick event
ex:
                            <button 
                                className='btn-login'
                                onClick={(event)=>this.handleLogin(event)}
                            >
                                Login
                            </button>



NOW TO CALL API FROM FE FROM ONLICK FUNCTION:
(we write APIs in file service => emergence of userService.js in services folder)

!! we have a package to send request from client to server called axios



NOW to actually login after clicking the submit button on the login form:
--> user Redux


In react, right after creating a class, we gonna create a constructor. In constructor we have this.state = {}... The 'this' is the class it lies within

NOTE: the this.setState is asynchronous function, so a callback in the setState function would force

the render function will be executed twice. The first time is right when we load the page. The second time is after anytime we setState



IN ORDER TO PASS A PROP FROM PARENT TO CHILD:
In the parent file, define the function, use the function in any element with a customized attribute name.
Ex:
UserManage.js is a parent file and ModalUser.js is a child file.
In UserManage.js, we define toggleModalUser function then put it in ModalUser element:
                <ModalUser
                    isOpen = {this.state.isOpenModalUser}
                    toggleFromParent = {this.toggleModalUser}
                />

Then in child file, we can access the function through prop as this.props.toggleFromParent


IN ORDER TO GET ANY DATA CHANGES FROM ANY FORMS IN THE FE:
=> use onChange