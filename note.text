before the app runs into render function, it will stop by ocnstructor

class Login extends Component {
    constructor(props) {
        super(props);
    }

if Login is passed a prop from somewhere else, we can use it here

props can be number, var, object, etc
but state always is an object


if 
class Login extends Component {
    constructor(props) {
        super(props);
        this.state = {          
            username: 'hoidanit',
            password: 'duc', 
        }
    }

anything in the this.state is the first value in the input (placeholder)
!!! but here the value in the input will be fixed, we can't change -> not practical

->> To be practical where we can change the input and the state can keep track with real-time change, we use
    attribute onChange in the input
ex:
                            <input 
                                type='text' 
                                className='form-control' 
                                placeholder='Enter your username'
                                value={this.state.username}
                                onChange={(event) => this.handleOnChangeInput(event)}
                            ></input>

where the function attribute onChange will call a handling function named handleOnChangeInput
we code handleOnChangeInput function right above the render

=====> with all that, the app got the change, but we still need to re-render it on UI every time there's a change (update state variable)
=> add this.setState({}) inside the handling function

handleOnChangeInput = (event) => {
    this.setState({
        username: event.target.value
    })
    console.log(event.target.value)
}



Now we wanna get the values on the inputs (username and password) after we click login button
the action of clicking on the login button called onClick event
ex:
                            <button 
                                className='btn-login'
                                onClick={(event)=>this.handleLogin(event)}
                            >
                                Login
                            </button>



NOW TO CALL API FROM FE FROM ONLICK FUNCTION:
(we write APIs in file service => emergence of userService.js in services folder)

!! we have a package to send request from client to server called axios



NOW to actually login after clicking the submit button on the login form:
--> user Redux


In react, right after creating a class, we gonna create a constructor. In constructor we have this.state = {}... The 'this' is the class it lies within

NOTE: the this.setState is asynchronous function, so a callback in the setState function would force

the render function will be executed twice. The first time is right when we load the page. The second time is after anytime we setState



IN ORDER TO PASS A PROP FROM PARENT TO CHILD:
In the parent file, define the function, use the function in any element with a customized attribute name.
Ex:
UserManage.js is a parent file and ModalUser.js is a child file.
In UserManage.js, we define toggleModalUser function then put it in ModalUser element:
                <ModalUser
                    isOpen = {this.state.isOpenModalUser}
                    toggleFromParent = {this.toggleModalUser}
                />

Then in child file, we can access the function through prop as this.props.toggleFromParent


IN ORDER TO GET ANY DATA CHANGES FROM ANY FORMS IN THE FE:
=> use onChange



SO WE WANNA UPDATE THE CHILD (CREATING A NEW USER IN MODAL) AND HAVE THE PARENT UPDATED (THE NEW USER AUTOMATICALLY SHOWS UP ON THE USERMANAGE WITHOUT RELOADING THE PAGE):
--> We create the handling function in the parent file
=> create createNewUser in the parent file

To pass a function from parent file to child file:
+ define the function in parent file
+ pass the function into the child element in the parent file
ex:
                <ModalUser
                    isOpen = {this.state.isOpenModalUser}
                    toggleFromParent = {this.toggleModalUser}
                    createNewUser={this.createNewUser}
                />

Next in the child file (ModalUser.js)
in whatever function that is provoked, call the function that was passed from parent file
ex:
    handleAddNewUser = () => {
      let isValid = this.checkValidateInput()
      if(isValid === true){
        //call API create modal
        this.props.createNewUser()
        console.log('data modal: ', this.state)
      }
    }



HOW TO PASS DATA FROM CHILD FILE TO PARENT FILE:
+ put a param in the function called in child file
+ in parent file, place a param to receive the data passed
ex:
in child file (ModalUser.js):
    handleAddNewUser = () => {
      let isValid = this.checkValidateInput()
      if(isValid === true){
        //call API create modal
        this.props.createNewUser(this.state)
      }
    }

in parent file (UserManage.js):
    createNewUser = (data) =>{
        alert('call me')
        console.log('data from child' ,data)
    }


IN ORDER TO delete a user, when we click on the delete button, we have to get the exact user
Note that each user rendered and each delete button are in a for loop => the index will be the key
*** Pass the key as a param into the function that handles the delete to pass the data of the exact user

How to use emitter:
In parent file, use emitter.emit()
ex:
    emitter.emit('EVENT_CLEAR_MODAL_DATA', {'id': 'your id'})
In child file, use emitter.on()
ex:
    listenToEmitter(){
      emitter.on('EVENT_CLEAR_MODAL_DATA', data => {
        console.log('listen emitter from parent: ', data)
      })
    }



To address the issue when the page is rendered but data now showing up on time:
---> Use componentDidUpdate

reduxStore is to store redux's data
persistor is to store a variable of redux like a variable of local storage


To add scrolling function:
import CustomScrollbars.js in file App

                            <CustomScrollbars style={{height: '100vh', width: '100%'}}>
                                <Switch>
                                    <Route path={path.HOME} exact component={(Home)} />
                                    <Route path={path.LOGIN} component={userIsNotAuthenticated(Login)} />
                                    <Route path={path.SYSTEM} component={userIsAuthenticated(System)} />
                                    <Route path={path.HOMEPAGE} component={HomePage} />
                                </Switch>
                            </CustomScrollbars>

From now on we start dynamically loading data from database to show on UI, no hardcoding anymore


Anything in here are props from Redux   
const mapStateToProps = state => {          
    return {
        isLoggedIn: state.user.isLoggedIn,
        language: state.app.language,
    };
};  

Redux persist to save a variable for the whole app
!!!!!! HOW TO SAVE LANGUAGE WHEN RELOAD PAGE !!!!!!!!!

In rootReducer.js:
in const userPersistConfig = {
    ...persistCommonConfig,
    key: 'user',
    whitelist: ['isLoggedIn', 'userInfo', 'language']
};

add 'language' in whitelist